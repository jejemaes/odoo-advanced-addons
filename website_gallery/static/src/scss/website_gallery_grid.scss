$grid-gutter: 0px;
$photo-height: 250px;

.container.o_gallery_grid {
    &--gallery {
        margin-top: 40px;
        margin-bottom: 40px;

        .row {
            margin-left: -$grid-gutter;
            margin-right: -$grid-gutter;
        }

        [class*="col-"] {
            padding-left: $grid-gutter;
            padding-right: $grid-gutter;
            margin-bottom: $grid-gutter * 2;
        }
    }
}

.o_gallery_grid_pict {
    outline: 0;
    overflow: hidden;
    position: relative;
    display: block;
    height: $photo-height;

    img{
        position: absolute;
        left: 50%;
        top: 50%;
        width: 100%;
        height: auto;
        transform: translate(-50%, -50%);

        [class*="-1"]:not([class*="-10"]):not([class*="-11"]):not([class*="-12"]) &,
        [class*="-2"] &,
        [class*="-3"] & {
            width: auto;
            height: 100%;
        }
    }
    img:hover {
        opacity: 0.8;
    }
}


// Plugin style

.image-source-link {
  color: #98C3D1;
}

.mfp-with-zoom .mfp-container,
.mfp-with-zoom.mfp-bg {
  opacity: 0;
  -webkit-backface-visibility: hidden;
  transition: all 0.23s ease-out;
}

.mfp-with-zoom.mfp-ready .mfp-container {
  opacity: 1;
}
.mfp-with-zoom.mfp-ready.mfp-bg {
  opacity: 0.8;
}

.mfp-with-zoom.mfp-removing .mfp-container, 
.mfp-with-zoom.mfp-removing.mfp-bg {
  opacity: 0;
}









#o_gallery {

    .o_gallery_number_picture {
        top: $card-spacer-x;
        right: $card-spacer-x;
        display: flex;
        flex-direction: column;
        justify-content: center;
        @include size(4rem);
        border-radius: 50%;
        text-align: center;
    }

    .o_gallery_unpublished {
        position: absolute;
        bottom: 0;
        width: 100%;
        padding: $card-spacer-y $card-spacer-x;
        text-align: right;
    }


    // Simple colored tags according to assigned background color
    @for $size from 1 through length($o-colors) {
        .o_gallery_tag_color_#{$size - 1} {
            @if $size == 1 {
                & {
                    background-color: white;
                    color: nth($o-colors, $size);
                    box-shadow: inset 0 0 0 2px nth($o-colors, $size);
                }
                &::after {
                    background-color: nth($o-colors, $size);
                }
            } @else {
                &, &::after {
                    background-color: nth($o-colors, $size);
                    color: $white;
                }
            }
        }
    }

}
